{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Documentation Example This repository contains some example C++ code from the Simulation Software Engineering lecture. It is used in the exercise to generate a documentation website. The code is a slightly modified version of the code used in the CMake exercise and thus also similar to the code from the Spack exercise . License Please check the LICENSE file in this repository.","title":"Home"},{"location":"#documentation-example","text":"This repository contains some example C++ code from the Simulation Software Engineering lecture. It is used in the exercise to generate a documentation website. The code is a slightly modified version of the code used in the CMake exercise and thus also similar to the code from the Spack exercise .","title":"Documentation Example"},{"location":"#license","text":"Please check the LICENSE file in this repository.","title":"License"},{"location":"compilation-and-installation/","text":"Compilation and Installation This section shortly describes the dependencies needed to compile the software and the individual steps to compile the code. Dependencies C++ compiler CMake at least version 3.12 Boost containers and Boost filesystem at least version 1.65.1 yaml-cpp at least version 0.6.0 Compiling the code We assume that you are in the root of the repository. Then execute the following steps: Create a new directory, e.g., called build/ , and change into this directory bash mkdir -p build && cd build Configure the project bash cmake .. Build the project bash make This will create the executable (also referred to as program) documentationexample and the static library libdocumentationexamplelib.a . Now, you can use the program already from within this build/ directory. (Optional) Install the software on your system bash make install You might have to use sudo to install the software if it should be installed in one of the system paths. More information about how to use the program can be found in the How to use the Program section .","title":"Installation"},{"location":"compilation-and-installation/#compilation-and-installation","text":"This section shortly describes the dependencies needed to compile the software and the individual steps to compile the code.","title":"Compilation and Installation"},{"location":"compilation-and-installation/#dependencies","text":"C++ compiler CMake at least version 3.12 Boost containers and Boost filesystem at least version 1.65.1 yaml-cpp at least version 0.6.0","title":"Dependencies"},{"location":"compilation-and-installation/#compiling-the-code","text":"We assume that you are in the root of the repository. Then execute the following steps: Create a new directory, e.g., called build/ , and change into this directory bash mkdir -p build && cd build Configure the project bash cmake .. Build the project bash make This will create the executable (also referred to as program) documentationexample and the static library libdocumentationexamplelib.a . Now, you can use the program already from within this build/ directory. (Optional) Install the software on your system bash make install You might have to use sudo to install the software if it should be installed in one of the system paths. More information about how to use the program can be found in the How to use the Program section .","title":"Compiling the code"},{"location":"how-to/","text":"How to use the Program This chapter assumes that the code has been compiled and potentially installed already. Instructions on how to install and compile the code can be found in the Compilation and Installation section . Using the Program We assume that you are in an directory from which you can run the program. For this section we assume that we are in the build/ directory as explained in the Compilation and Installation section . If you have installed the software in a system path, you can follow the same steps, but the output printed and the paths used may differ. The program can be run by ./documentationexample [YAMLFILE] where YAMLFILE refers to the path of a YAML file, e.g., the file config.yml inside the src/yamlParser/ directory. Specification of a YAMLFILE is optional . The program will do the following steps The program greets you with a message Let's fight with CMake, Docker, and some dependencies! The program modifies a flat set using Boost container and print the result Modify a flat set using boost container Elements in s1: 1 2 3 4 The program inspects the contens of the current directory and prints the contents of the directory to the screen. Inspect the current directory using boost filesystem \".\" is a directory containing: \"CMakeCache.txt\" \"CMakeFiles\" \"Makefile\" \"cmake_install.cmake\" \"documentationexample\" \"libdocumentationexamplelib.a\" The program checks whether a YAMLFILE has been supplied on the command line. If no YAMLFILE has been passed to the program. If a YAMLFILE is specified, e.g., via ./documentationexample ../src/yamlParser/config.yml the YAMLFILE will be parsed and the program tries to print the version property of the `YAMLFILE. Parse some yaml file with yaml-cpp ../src/yamlParser/config.yml Version: 1.2.3 If there is no version property, the program will crash terminate called after throwing an instance of 'YAML::TypedBadConversion<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >' what(): bad conversion Aborted (core dumped Finally, the program terminates. Full Output Without YAMLFILE $ ./documentationexample Let's fight with CMake, Docker, and some dependencies! Modify a flat set using boost container Elements in s1: 1 2 3 4 Inspect the current directory using boost filesystem \".\" is a directory containing: \"CMakeCache.txt\" \"CMakeFiles\" \"Makefile\" \"cmake_install.cmake\" \"documentationexample\" \"libdocumentationexamplelib.a\" Full Output With YAMLFILE $ ./documentationexample ../src/yamlParser/config.yml Let's fight with CMake, Docker, and some dependencies! Modify a flat set using boost container Elements in s1: 1 2 3 4 Inspect the current directory using boost filesystem \".\" is a directory containing: \"CMakeCache.txt\" \"CMakeFiles\" \"Makefile\" \"cmake_install.cmake\" \"documentationexample\" \"libdocumentationexamplelib.a\" Parse some yaml file with yaml-cpp ../src/yamlParser/config.yml Version: 1.2.3","title":"Getting Started"},{"location":"how-to/#how-to-use-the-program","text":"This chapter assumes that the code has been compiled and potentially installed already. Instructions on how to install and compile the code can be found in the Compilation and Installation section .","title":"How to use the Program"},{"location":"how-to/#using-the-program","text":"We assume that you are in an directory from which you can run the program. For this section we assume that we are in the build/ directory as explained in the Compilation and Installation section . If you have installed the software in a system path, you can follow the same steps, but the output printed and the paths used may differ. The program can be run by ./documentationexample [YAMLFILE] where YAMLFILE refers to the path of a YAML file, e.g., the file config.yml inside the src/yamlParser/ directory. Specification of a YAMLFILE is optional . The program will do the following steps The program greets you with a message Let's fight with CMake, Docker, and some dependencies! The program modifies a flat set using Boost container and print the result Modify a flat set using boost container Elements in s1: 1 2 3 4 The program inspects the contens of the current directory and prints the contents of the directory to the screen. Inspect the current directory using boost filesystem \".\" is a directory containing: \"CMakeCache.txt\" \"CMakeFiles\" \"Makefile\" \"cmake_install.cmake\" \"documentationexample\" \"libdocumentationexamplelib.a\" The program checks whether a YAMLFILE has been supplied on the command line. If no YAMLFILE has been passed to the program. If a YAMLFILE is specified, e.g., via ./documentationexample ../src/yamlParser/config.yml the YAMLFILE will be parsed and the program tries to print the version property of the `YAMLFILE. Parse some yaml file with yaml-cpp ../src/yamlParser/config.yml Version: 1.2.3 If there is no version property, the program will crash terminate called after throwing an instance of 'YAML::TypedBadConversion<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >' what(): bad conversion Aborted (core dumped Finally, the program terminates.","title":"Using the Program"},{"location":"how-to/#full-output-without-yamlfile","text":"$ ./documentationexample Let's fight with CMake, Docker, and some dependencies! Modify a flat set using boost container Elements in s1: 1 2 3 4 Inspect the current directory using boost filesystem \".\" is a directory containing: \"CMakeCache.txt\" \"CMakeFiles\" \"Makefile\" \"cmake_install.cmake\" \"documentationexample\" \"libdocumentationexamplelib.a\"","title":"Full Output Without YAMLFILE"},{"location":"how-to/#full-output-with-yamlfile","text":"$ ./documentationexample ../src/yamlParser/config.yml Let's fight with CMake, Docker, and some dependencies! Modify a flat set using boost container Elements in s1: 1 2 3 4 Inspect the current directory using boost filesystem \".\" is a directory containing: \"CMakeCache.txt\" \"CMakeFiles\" \"Makefile\" \"cmake_install.cmake\" \"documentationexample\" \"libdocumentationexamplelib.a\" Parse some yaml file with yaml-cpp ../src/yamlParser/config.yml Version: 1.2.3","title":"Full Output With YAMLFILE"}]}